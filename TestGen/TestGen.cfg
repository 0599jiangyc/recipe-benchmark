[DEFAULT]
# version
v = 1.0.0

[CONFIG]
# arch: 32 or 64. 
arch = 64 
# recipe checks the existance of this file to get result of exploits.
check_file = /tmp/recipe_check
# recipe checks the content of this file to get result of attacks.
log_file = /tmp/recipe_log
# bad command
bad_cmd = touch /tmp/recipe_check
# init char
init_char = \xaa
# guard char
guard_char = \xcc
# compile cmd
compile_cmd = gcc -g -w -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -z norelro

# "gcc_baseline":"gcc -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -z norelro",
# "clang_baseline": "clang -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -z norelro",
# "gcc_fullrelro":"gcc -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -Wl,-z,relro,-z,now",
# "clang_fullrelro":"clang -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -Wl,-z,relro,-z,now",
# "gcc_dep":"gcc -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z norelro",
# "clang_dep":"clang -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z norelro",
# "gcc_pie":"gcc -D_FORTIFY_SOURCE=0 -fno-stack-protector -z execstack -z norelro",
# "clang_pie":"clang -D_FORTIFY_SOURCE=0 -fPIE -pie -fno-stack-protector -z execstack -z norelro",
# "gcc_fortify":"gcc -D_FORTIFY_SOURCE=2 -no-pie -fno-stack-protector -z execstack -z norelro -O2",
# "clang_fortify":"clang -D_FORTIFY_SOURCE=2 -no-pie -fno-stack-protector -z execstack -z norelro -O2",
# "gcc_stackptr":"gcc -D_FORTIFY_SOURCE=0 -no-pie -fstack-protector-all -z execstack -z norelro",
# "clang_stackptr":"clang -D_FORTIFY_SOURCE=0 -no-pie -fstack-protector-all -z execstack -z norelro",
# "gcc_default":"gcc ",
# "clang_default":"clang ",
# "clang_safestack":"clang -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -z norelro # -fsanitize=safe-stack",
# "gcc_bestflags": "gcc -D_FORTIFY_SOURCE=2 -fstack-protector-all -Wl,-z,relro,-z,now -O2",
# "clang_bestflags": "clang -fPIE -pie -D_FORTIFY_SOURCE=2 -fstack-protector-all -Wl,-z,relro,-z,now -O2",
# "gcc_asan":"gcc -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -z norelro -fsanitize=address",
# "clang_asan":"clang -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -z norelro -fsanitize=address",
# "softbound":"/home/jyc/Desktop/RecIPE/softboundcets-34/softboundcets-llvm-clang34/Release+Asserts/bin/clang -fsoftboundcets -L/home/jyc/Desktop/RecIPE/softboundcets-34/softboundcets-lib/ -lm -lrt -D_FORTIFY_SOURCE=0 -fno-stack-protector -Wl,-z,execstack -Wl,-z,norelro",
# "lowfat":"/home/jyc/Desktop/RecIPE/LowFat/build/bin/clang -fsanitize=lowfat -O2 -D_FORTIFY_SOURCE=0 -fno-stack-protector -z execstack -z norelro",
# "effectivesan":"/home/jyc/Desktop/RecIPE/EffectiveSan/bin/clang -fsanitize=effective -O2 -D_FORTIFY_SOURCE=0 -fno-stack-protector -z execstack -z norelro",
# "strong": "/home/jyc/Desktop/RecIPE/EffectiveSan/bin/clang -fsanitize=effective -D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now -fstack-protector-all -O2", # ESan is not compatible with pie

[TestGenAttr]
# NOTE: set every attr you like, RecIPE would try combine them to generate test cases. Splitter=,
# attr1-region 
regions = stack,heap,data,bss
# attr2-tech
techniques = BoundOFlow,NBoundOFlow,OOBPtrHijack,PtrHijack,StructOFlow,NBoundUFlow
# attr3-target
targets = retaddr,oldebp,funcptr,GOT,hook,exit,jmpbuf
# attr4-function
functions = read,memcpy,bcopy,homebrew

